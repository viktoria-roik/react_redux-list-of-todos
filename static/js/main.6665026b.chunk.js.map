{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","InitialState","filterReducer","filter","toLowerCase","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","newTodos","title","includes","completed","length","className","map","id","isCurrentTodo","onClick","currentTodoActions","handleSelectTodo","classNames","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","actionsFilter","placeholder","newQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","catch","console","log","finally","href","email","name","App","todoFromServer","setTodosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6665026b.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\ntype SetStatusAction = { type: 'filter/STATUS', payload: Status };\n\nconst setQuery = (query: string): SetQueryAction => (\n  { type: 'filter/QUERY', payload: query }\n);\n\nconst setStatus = (status: Status): SetStatusAction => (\n  { type: 'filter/STATUS', payload: status }\n);\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nexport const actions = { setQuery, setStatus };\n\nconst InitialState = {\n  query: '',\n  status: 'all' as Status,\n};\n\nconst filterReducer = (\n  filter: State = InitialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return {\n        ...filter,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...filter,\n        query: action.payload.toLowerCase(),\n      };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = { type: 'todos/SET', payload: Todo[] };\n\ntype Action = SetAction;\n\nconst setTodos = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n\n  const filteredTodos = useMemo(() => {\n    let newTodos = [...todos];\n\n    if (filter.query) {\n      newTodos = newTodos.filter(\n        todo => todo.title.toLowerCase().includes(filter.query),\n      );\n    }\n\n    switch (filter.status) {\n      case 'active':\n        return newTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return newTodos.filter(todo => todo.completed);\n\n      default:\n        return newTodos;\n    }\n  }, [filter]);\n\n  const handleSelectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => {\n              const {\n                id,\n                title,\n                completed,\n              } = todo;\n\n              const isCurrentTodo = id === currentTodo?.id;\n\n              return (\n                <tr data-cy=\"todo\" key={id}>\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={!completed ? 'has-text-danger' : 'has-text-success'}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleSelectTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames('far', {\n                          'fa-eye': !isCurrentTodo,\n                          'fa-eye-slash': isCurrentTodo,\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n  const dispatch = useAppDispatch();\n\n  const handleQueryChange = (newQuery: string) => {\n    dispatch(actionsFilter.setQuery(newQuery));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(actionsFilter.setQuery(''));\n  };\n\n  const handleStatusChange = (status: Status) => {\n    dispatch(actionsFilter.setStatus(status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              handleStatusChange(event.target.value as Status);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => handleQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {!!query.length && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear Search\"\n              onClick={handleQueryClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader: React.FC = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import { Todo } from './types/Todo';\r\nimport { User } from './types/User';\r\n\r\n// eslint-disable-next-line max-len\r\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\r\n\r\nfunction wait(delay: number): Promise<void> {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nfunction get<T>(url: string): Promise<T> {\r\n  // eslint-disable-next-line prefer-template\r\n  const fullURL = BASE_URL + url + '.json';\r\n\r\n  return wait(300)\r\n    .then(() => fetch(fullURL))\r\n    .then(res => res.json());\r\n}\r\n\r\nexport const getTodos = () => get<Todo[]>('/todos');\r\n\r\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\r\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [user, setUser] = useState<User>();\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => {\n          // eslint-disable-next-line no-console\n          console.log('Something went wrong');\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  const handleRemoveCurrentTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleRemoveCurrentTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {\n                  currentTodo?.completed\n                    ? (\n                      <strong className=\"has-text-success\">Done</strong>\n                    ) : (\n                      <strong className=\"has-text-danger\">Planned</strong>\n                    )\n                }\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as setTodosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todoFromServer) => dispatch(setTodosActions.setTodos(todoFromServer)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {!!todos.length && (\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nimport { store } from './app/store';\r\nimport { App } from './App';\r\n\r\n// Just a convenient component with all the wrappers for the `App`\r\n// The Router component (if you use it) should be placed inside the Provider\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}